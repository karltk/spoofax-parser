module relational-calculus
imports list-set options

/**
 * Relation: [(a1, b1), (a2, b2), ....]
 */
strategies

  /**
   * Returns the transitive closure of a relation.
   *
   * Port of imperative algorithm "Transitive-Closure" on page 563 of 
   * "Introduction to Algorithms", Thomas Cormen.
   *
   * :: Relation(a, a) -> Relation(a, a)
   */
  transitive-closure =
    ?rel
    ; relation-elements => elems
    ; <cart(id)> (elems, elems) => matrix
    ; <foldl(
        \ (k, last) -> 
            <filter(
                test(<in-relation> (<id>, last))
              +   test(<in-relation> ((<Fst>, k), last))
                ; test(<in-relation> ((k, <Snd>), last))
            )> matrix \
      )> (elems, <union> (rel, <map(!(<id>, <id>))> elems))

  /**
   * :: (a * b) * Relation(a, b) -> fail?
   */
  in-relation =
    where(elem)

  relation-elements =
    <union> (<input-domain>, <output-domain>)

  input-domain =
    map(Fst); make-set

  output-domain =
    map(Snd); make-set


  